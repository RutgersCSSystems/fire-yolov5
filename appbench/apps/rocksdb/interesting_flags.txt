-benchmark_read_rate_limit (If non-zero, db_bench will rate-limit the reads
      from RocksDB. This is the global rate in ops/second.) type: uint64
      default: 0
    -benchmark_write_rate_limit (If non-zero, db_bench will rate-limit the
      writes going into RocksDB. This is the global rate in bytes/second.)
      type: uint64 default: 0
    -benchmarks (Comma-separated list of operations to run in the specified
      order. Available benchmarks:
      	fillseq       -- write N values in sequential key order in async mode
      	fillseqdeterministic       -- write N values in the specified key order
      and keep the shape of the LSM tree
      	fillrandom    -- write N values in random key order in async mode
      	filluniquerandomdeterministic       -- write N values in a random key
      order and keep the shape of the LSM tree
      	overwrite     -- overwrite N values in random key order in async mode
      	fillsync      -- write N/1000 values in random key order in sync mode
      	fill100K      -- write N/1000 100K values in random order in async mode
      	deleteseq     -- delete N keys in sequential order
      	deleterandom  -- delete N keys in random order
      	readseq       -- read N times sequentially
      	readtocache   -- 1 thread reading database sequentially
      	readreverse   -- read N times in reverse order
      	readrandom    -- read N times in random order
      	readmissing   -- read N missing keys in random order
      	readwhilewriting      -- 1 writer, N threads doing random reads
      	readwhilemerging      -- 1 merger, N threads doing random reads
      	readwhilescanning     -- 1 thread doing full table scan, N threads doing
      random reads
      	readrandomwriterandom -- N threads doing random-read, random-write
      	updaterandom  -- N threads doing read-modify-write for random keys
      	xorupdaterandom  -- N threads doing read-XOR-write for random keys
      	appendrandom  -- N threads doing read-modify-write with growing values
      	mergerandom   -- same as updaterandom/appendrandom using merge operator.
      Must be used with merge_operator
      	readrandommergerandom -- perform N random read-or-merge operations. Must
      be used with merge_operator
      	newiterator   -- repeated iterator creation
      	seekrandom    -- N random seeks, call Next seek_nexts times per seek
      	seekrandomwhilewriting -- seekrandom and 1 thread doing overwrite
      	seekrandomwhilemerging -- seekrandom and 1 thread doing merge
      	crc32c        -- repeated crc32c of 4K of data
      	xxhash        -- repeated xxHash of 4K of data
      	acquireload   -- load N*1000 times
      	fillseekseq   -- write N values in sequential key, then read them by
      seeking to each key
      	randomtransaction     -- execute N random transactions and verify
      correctness
      	randomreplacekeys     -- randomly replaces N keys by deleting the old
      version and putting the new version
      
      	timeseries            -- 1 writer generates time series data and
      multiple readers doing random reads on id


	-block_size (Number of bytes in a block.) type: int32 default: 4096

	-compaction_readahead_size (Compaction readahead size) type: int32
      default: 0
-enable_io_prio (Lower the background flush/compaction threads' IO
      priority) type: bool default: false
    -enable_numa (Make operations aware of NUMA architecture and bind memory
      and cpus corresponding to nodes together. In NUMA, memory in same node as
      CPUs are closer when compared to memory in other nodes. Reads can be
      faster when the process is bound to CPU and memory of same node. Use
      "$numactl --hardware" command to see NUMA memory architecture.)
      type: bool default: false

    -memtable_use_huge_page (Try to use huge page in memtables.) type: bool
      default: false

     -random_access_max_buffer_size (Maximum windows randomaccess buffer size)
      type: int32 default: 1048576

    -rate_limit_bg_reads (Use options.rate_limiter on compaction reads)
      type: bool default: false
    
    -rate_limiter_auto_tuned (Enable dynamic adjustment of rate limit according
      to demand for background I/O) type: bool default: false
    -rate_limiter_bytes_per_sec (Set options.rate_limiter value.) type: uint64
      default: 0

