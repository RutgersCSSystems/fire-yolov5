diff --git a/appbench/apps/rocksdb/Makefile b/appbench/apps/rocksdb/Makefile
index b7aa792db..07b389495 100644
--- a/appbench/apps/rocksdb/Makefile
+++ b/appbench/apps/rocksdb/Makefile
@@ -10,8 +10,6 @@ BASH_EXISTS := $(shell which bash)
 SHELL := $(shell which bash)
 include common.mk
 
-EXTRA_LDFLAGS+=/usr/lib/lib_CPBI.a
-
 CLEAN_FILES = # deliberately empty, so we can append below.
 CFLAGS += ${EXTRA_CFLAGS} -Wno-error
 CXXFLAGS += ${EXTRA_CXXFLAGS}
@@ -220,7 +218,7 @@ am__v_AR_ = $(am__v_AR_$(AM_DEFAULT_VERBOSITY))
 am__v_AR_0 = @echo "  AR      " $@;
 am__v_AR_1 =
 
-AM_LINK = $(AM_V_CCLD)$(CXX) -L. $(patsubst lib%.a, -l%, $(patsubst lib%.$(PLATFORM_SHARED_EXT), -l%, $^)) $(EXEC_LDFLAGS) -o $@ $(LDFLAGS) $(COVERAGEFLAGS) -L /usr/lib /usr/lib/lib_CPBI.a
+AM_LINK = $(AM_V_CCLD)$(CXX) -L. $(patsubst lib%.a, -l%, $(patsubst lib%.$(PLATFORM_SHARED_EXT), -l%, $^)) $(EXEC_LDFLAGS) -o $@ $(LDFLAGS) $(COVERAGEFLAGS)
 AM_SHARE = $(AM_V_CCLD) $(CXX) $(PLATFORM_SHARED_LDFLAGS)$@ -L. $(patsubst lib%.$(PLATFORM_SHARED_EXT), -l%, $^) $(EXEC_LDFLAGS) $(LDFLAGS) -o $@
 
 # Detect what platform we're building on.
diff --git a/appbench/apps/rocksdb/compile.sh b/appbench/apps/rocksdb/compile.sh
index 8636c0b51..9271b319e 100755
--- a/appbench/apps/rocksdb/compile.sh
+++ b/appbench/apps/rocksdb/compile.sh
@@ -9,5 +9,5 @@ sudo apt-get install -y libgflags2.2 libgflags-dev libsnappy-dev zlib1g-dev libb
 #rocksdb_clean
 
 echo "compiling rocksdb"
-#make clean
+make clean
 DEBUG_LEVEL=0 CFLAGS=-Wno-error make db_bench -j$(nproc)
diff --git a/appbench/apps/rocksdb/rocksdb-exp-test.sh b/appbench/apps/rocksdb/rocksdb-exp-test.sh
index c76b55c11..45514bfe2 100755
--- a/appbench/apps/rocksdb/rocksdb-exp-test.sh
+++ b/appbench/apps/rocksdb/rocksdb-exp-test.sh
@@ -34,45 +34,56 @@ RESULTFILE=""
 mkdir -p $RESULTS
 
 
-#declare -a config_arr=("Vanilla" "Cross_Naive" "CPBI" "CNI" "CPBV" "CPNV" "CPNI")
 
-declare -a num_arr=("40000000")
-NUM=40000000
+declare -a num_arr=("20000000")
+NUM=20000000
+
+#declare -a num_arr=("200000")
+#NUM=200000
+
+#declare -a workload_arr=("readrandom" "readseq" "readreverse" "compact" "overwrite" "readwhilewriting" "readwhilescanning")
+#declare -a thread_arr=("4" "8" "16" "32")
+#declare -a config_arr=("Vanilla" "Cross_Naive" "CPBI" "CNI" "CPBV" "CPNV" "CPNI")
 
 declare -a thread_arr=("32" "16"  "8"  "4" "1")
+declare -a thread_arr=("32" "16"  "8"  "4" "1")
 
 
 declare -a workload_arr=("readseq" "readrandom" "readwhilescanning" "readreverse" "multireadrandom")
 declare -a workload_arr=("multireadrandom" "readrandom" "readreverse" "readseq" "readwhilescanning")
-#declare -a workload_arr=("readrandom" "readreverse" "readseq" "readwhilescanning")
-#declare -a workload_arr=("readrandom" "readseq" "readreverse" "compact" "overwrite" "readwhilewriting" "readwhilescanning")
+
+
+declare -a workload_arr=("readrandom" "readreverse" "readseq" "readwhilescanning")
+
+#declare -a workload_arr=("multireadrandom")
 
 declare -a membudget=("6" "4" "2" "8")
 declare -a membudget=("6")
 
+USEDB=1
+MEM_REDUCE_FRAC=1
+ENABLE_MEM_SENSITIVE=1
 
 #echo "CAUTION, CAUTION, USE EXITING DB is set to 0 for write workload testing!!!"
 
 #declare -a config_arr=("Cross_Info" "OSonly" "Vanilla" "Cross_Info_sync" "Cross_Blind" "CII" "CIP" "CIP_sync" "CIPI")
 #declare -a config_arr=("Vanilla" "OSonly" "CII_sync" "CIP_sync" "CPBI_sync" "Cross_Info_sync" "CII" "CIP" "CPBI")
 declare -a config_arr=("Vanilla" "OSonly" "Cross_Info" "CII" "CIP" "CPBI" "CIPI")
+
 declare -a config_arr=("Vanilla" "OSonly" "CPBI")
+
 declare -a trials=("TRIAL1" "TRIAL2" "TRIAL3")
 
 
-USEDB=1
-MEM_REDUCE_FRAC=0
-ENABLE_MEM_SENSITIVE=0
-declare -a membudget=("6")
+declare -a membudget=("4")
 declare -a trials=("TRIAL1")
 declare -a config_arr=("Vanilla" "OSonly" "CPBI")
-declare -a config_arr=("CIP" "CII" "CIPI" "CPBI")
 declare -a config_arr=("CPBI")
-declare -a workload_arr=("multireadrandom")
-declare -a thread_arr=("32")
+declare -a workload_arr=("readrandom")
 
 
 G_TRIAL="TRIAL1"
+
 #Require for large database
 ulimit -n 1000000 
 
@@ -186,7 +197,6 @@ RUN() {
 					rm -rf $DBDIR/LOCK
 
 					export LD_PRELOAD=/usr/lib/lib_$CONFIG.so
-					echo "$APPPREFIX "./"$APP $PARAMS $READARGS &> $RESULTFILE"
 					$APPPREFIX "./"$APP $PARAMS $READARGS &> $RESULTFILE
 					export LD_PRELOAD=""
 					sudo dmesg -c &>> $RESULTFILE
@@ -212,7 +222,7 @@ GETMEMORYBUDGET() {
 	let FRACTION=$1
 	let NUMANODE0=$(($NUMAFREE0/$FRACTION))
 	let NUMANODE1=$(($NUMAFREE1/$FRACTION))
-	#let NUMANODE1=1000
+
 
 	let DISKSZ0=$(($NUMAFREE0-$NUMANODE0))
 	let DISKSZ1=$(($NUMAFREE1-$NUMANODE1))
diff --git a/appbench/apps/rocksdb/test_rocksdb.sh b/appbench/apps/rocksdb/test_rocksdb.sh
new file mode 100755
index 000000000..5f06e8961
--- /dev/null
+++ b/appbench/apps/rocksdb/test_rocksdb.sh
@@ -0,0 +1,263 @@
+#!/bin/bash
+#set -x
+DBHOME=$PWD
+THREAD=16
+VALUE_SIZE=4096
+SYNC=0
+KEYSIZE=1000
+WRITE_BUFF_SIZE=67108864
+DBDIR=$DBHOME/DATA
+#DBDIR=/mnt/remote/DATA
+
+
+if [ -z "$APPS" ]; then
+        echo "APPS environment variable is undefined."
+        echo "Did you setvars? goto Base directory and $ source ./scripts/setvars.sh"
+        exit 1
+fi
+
+
+#WORKLOAD="readseq"
+#WORKLOAD="readreverse"
+WORKLOAD="readrandom"
+WRITEARGS="--benchmarks=fillseq --use_existing_db=0 --threads=1"
+READARGS="--benchmarks=$WORKLOAD --use_existing_db=1 --mmap_read=0 --threads=$THREAD"
+#READARGS="--benchmarks=$WORKLOAD --use_existing_db=1 --mmap_read=0 --threads=$THREAD --advise_random_on_open=false --readahead_size=2097152 --compaction_readahead_size=2097152 --log_readahead_size=2097152"
+APPPREFIX="/usr/bin/time -v"
+
+APP=db_bench
+APPOUTPUTNAME="ROCKSDB"
+
+RESULTS="RESULTS"/$WORKLOAD
+RESULTFILE=""
+
+mkdir -p $RESULTS
+
+
+
+#declare -a num_arr=("20000")
+#NUM=20000
+
+declare -a num_arr=("20000000")
+NUM=20000000
+
+#declare -a workload_arr=("readrandom" "readseq" "readreverse" "compact" "overwrite" "readwhilewriting" "readwhilescanning")
+#declare -a thread_arr=("4" "8" "16" "32")
+#declare -a config_arr=("Vanilla" "Cross_Naive" "CPBI" "CNI" "CPBV" "CPNV" "CPNI")
+
+#declare -a thread_arr=("32" "16"  "8"  "4" "1")
+declare -a thread_arr=("32")
+
+
+declare -a workload_arr=("readseq" "readrandom" "readwhilescanning" "readreverse" "multireadrandom")
+declare -a workload_arr=("multireadrandom" "readrandom" "readreverse" "readseq" "readwhilescanning")
+
+
+declare -a workload_arr=("readrandom" "readreverse" "readseq" "readwhilescanning")
+
+declare -a workload_arr=("multireadrandom")
+
+declare -a membudget=("6" "4" "2" "8")
+declare -a membudget=("4")
+
+USEDB=1
+MEM_REDUCE_FRAC=0
+ENABLE_MEM_SENSITIVE=0
+
+#echo "CAUTION, CAUTION, USE EXITING DB is set to 0 for write workload testing!!!"
+
+#declare -a config_arr=("Cross_Info" "OSonly" "Vanilla" "Cross_Info_sync" "Cross_Blind" "CII" "CIP" "CIP_sync" "CIPI")
+#declare -a config_arr=("Vanilla" "OSonly" "CII_sync" "CIP_sync" "CPBI_sync" "Cross_Info_sync" "CII" "CIP" "CPBI")
+declare -a config_arr=("Vanilla" "OSonly" "Cross_Info" "CII" "CIP" "CPBI" "CIPI")
+
+declare -a config_arr=("Vanilla" "OSonly" "CPBI")
+
+declare -a trials=("TRIAL1" "TRIAL2" "TRIAL3")
+
+
+declare -a membudget=("4")
+declare -a trials=("TRIAL1")
+declare -a config_arr=("Vanilla" "OSonly")
+#declare -a config_arr=("CPBI")
+#declare -a config_arr=("Vanilla")
+#declare -a workload_arr=("multireadrandom")
+declare -a workload_arr=("readseq")
+
+
+G_TRIAL="TRIAL1"
+
+#Require for large database
+ulimit -n 1000000 
+
+
+FlushDisk()
+{
+        sudo sh -c "echo 3 > /proc/sys/vm/drop_caches"
+        sudo sh -c "sync"
+        sudo sh -c "echo 3 > /proc/sys/vm/drop_caches"
+        sudo sh -c "sync"
+        #sudo dmesg --clear
+        sleep 5
+}
+
+CLEAR_DATA()
+{
+        sudo killall $APP
+        sudo killall $APP
+        sleep 3
+        sudo killall $APP
+        rm -rf $DBDIR/*
+        rm -rf *.sst CURRENT IDENTITY LOCK MANIFEST-* OPTIONS-* WAL_LOG/
+}
+
+
+
+COMPILE_AND_WRITE()
+{
+        export LD_PRELOAD=""
+	PARAMS="--db=$DBDIR --value_size=$VALUE_SIZE --wal_dir=$DBDIR/WAL_LOG --sync=$SYNC --key_size=$KEYSIZE --write_buffer_size=$WRITE_BUFF_SIZE --num=$NUM --target_file_size_base=209715200"
+	mkdir -p $RESULTS
+
+	#cd $PREDICT_LIB_DIR
+	#make clean
+	#$PREDICT_LIB_DIR/compile.sh &> compile.out
+	cd $DBHOME
+        $DBHOME/db_bench $PARAMS $WRITEARGS #&> $RESULTS/WARMUP-WRITE.out
+
+        ##Condition the DB to get Stable results
+        #$DBHOME/db_bench $PARAMS/users/kannan11/ssd/prefetching/appbench/apps/rocksdb/DATA/LOCK $READARGS  #&> $RESULTS/WARMUP-READ1.out
+        #FlushDisk
+        #$DBHOME/db_bench $PARAMS $READARGS  &> WARMUP-READ2.out
+}
+
+
+COMPILE()
+{
+        export LD_PRELOAD=""
+	cd $PREDICT_LIB_DIR
+	$PREDICT_LIB_DIR/compile.sh &> compile.out
+	cd $DBHOME
+}
+
+
+
+
+
+GEN_RESULT_PATH() {
+	WORKLOAD=$1
+	CONFIG=$2
+	THREAD=$3
+	let KEYCOUNT=$NUM/1000000
+	#WORKLOAD="DUMMY"
+	#RESULTFILE=""
+
+	if [ "$ENABLE_MEM_SENSITIVE" -eq "0" ]
+	then 
+		RESULTS=$OUTPUTDIR"-"$G_TRIAL/$APPOUTPUTNAME/$KEYCOUNT"M-KEYS"/$WORKLOAD/$THREAD
+	else
+        	RESULTS=$OUTPUTDIR"-"$G_TRIAL/$APPOUTPUTNAME/$KEYCOUNT"M-KEYS"/"MEMFRAC"$MEM_REDUCE_FRAC/$WORKLOAD/$THREAD/
+	fi
+	mkdir -p $RESULTS
+        RESULTFILE=$RESULTS/$CONFIG"512KB.out"
+}
+
+
+
+RUN() {
+
+        #CLEAR_DATA
+	echo "BEGINNING TO WARM UP ......."
+	#cd $PREDICT_LIB_DIR
+	#$PREDICT_LIB_DIR/compile.sh
+	cd $DBHOME
+	#COMPILE_AND_WRITE
+	#COMPILE
+	echo "FINISHING WARM UP ......."
+	echo "..................................................."
+	FlushDisk
+	#sudo dmesg -c
+
+	for NUM in "${num_arr[@]}"
+	do
+		for THREAD in "${thread_arr[@]}"
+		do
+			PARAMS="--db=$DBDIR --value_size=$VALUE_SIZE --wal_dir=$DBDIR/WAL_LOG --sync=$SYNC --key_size=$KEYSIZE --write_buffer_size=$WRITE_BUFF_SIZE --num=$NUM  --seed=1576170874"
+
+			for WORKLOAD in "${workload_arr[@]}"
+			do
+				for CONFIG in "${config_arr[@]}"
+				do
+					RESULTS=""
+					READARGS="--benchmarks=$WORKLOAD --use_existing_db=$USEDB --mmap_read=0 --threads=$THREAD"
+					GEN_RESULT_PATH $WORKLOAD $CONFIG $THREAD $NUM
+
+					mkdir -p $RESULTS
+
+					echo "RUNNING $CONFIG and writing results to #$RESULTS/$CONFIG.out"
+					echo "..................................................."
+
+					rm -rf $DBDIR/LOCK
+
+                    set -x
+					export LD_PRELOAD=/usr/lib/lib_$CONFIG.so
+					#$APPPREFIX "./"$APP $PARAMS $READARGS #&> $RESULTFILE
+					"./"$APP $PARAMS $READARGS &> $RESULTFILE
+					export LD_PRELOAD=""
+                    cat $RESULTFILE | grep MB
+                    set +x
+					#sudo dmesg -c &>> $RESULTFILE
+					echo ".......FINISHING $CONFIG......................"
+					#cat $RESULTS/$CONFIG.out | grep "MB/s"
+					FlushDisk
+				done
+			done
+		done
+	done
+}
+
+GETMEMORYBUDGET() {
+        sudo rm -rf  /mnt/ext4ramdisk/*
+        $SCRIPTS/mount/umount_ext4ramdisk.sh
+        sudo rm -rf  /mnt/ext4ramdisk/*
+        sudo rm -rf  /mnt/ext4ramdisk/
+
+        let NUMAFREE0=`numactl --hardware | grep "node 0 free:" | awk '{print $4}'`
+        let NUMAFREE1=`numactl --hardware | grep "node 1 free:" | awk '{print $4}'`
+
+	echo "MEMORY $1"
+	let FRACTION=$1
+	let NUMANODE0=$(($NUMAFREE0/$FRACTION))
+	let NUMANODE1=$(($NUMAFREE1/$FRACTION))
+
+
+	let DISKSZ0=$(($NUMAFREE0-$NUMANODE0))
+	let DISKSZ1=$(($NUMAFREE1-$NUMANODE1))
+
+	echo "***NODE 0: "$DISKSZ0"****NODE 1: "$DISKSZ1
+	$SCRIPTS/mount/releasemem.sh "NODE0"
+	$SCRIPTS/mount/releasemem.sh "NODE1"
+
+        numactl --membind=0 $SCRIPTS/mount/reducemem.sh $DISKSZ0 "NODE0"
+        numactl --membind=1 $SCRIPTS/mount/reducemem.sh $DISKSZ1 "NODE1"
+}
+
+
+
+#COMPILE_AND_WRITE
+#COMPILE
+
+for G_TRIAL in "${trials[@]}"
+do
+	if [ "$ENABLE_MEM_SENSITIVE" -eq "1" ]
+	then
+		for MEM_REDUCE_FRAC in "${membudget[@]}"
+		do
+			GETMEMORYBUDGET $MEM_REDUCE_FRAC
+			RUN
+			#$SCRIPTS/mount/releasemem.sh "NODE0"
+			#$SCRIPTS/mount/releasemem.sh "NODE1"
+		done
+	else
+		RUN
+	fi
+done
diff --git a/appbench/apps/rocksdb/tools/db_bench_tool.cc b/appbench/apps/rocksdb/tools/db_bench_tool.cc
index 6b1378efa..f0b3ed46c 100644
--- a/appbench/apps/rocksdb/tools/db_bench_tool.cc
+++ b/appbench/apps/rocksdb/tools/db_bench_tool.cc
@@ -6090,12 +6090,10 @@ class Benchmark {
     std::unique_ptr<char[]> ts_guard;
     if (user_timestamp_size_ > 0) {
       ts_guard.reset(new char[user_timestamp_size_]);
-    
     }
 
     Duration duration(FLAGS_duration, reads_);
-    while (!duration.Done(entries_per_batch_)  && num_multireads < 200000) {
-
+    while (!duration.Done(entries_per_batch_)) {
       DB* db = SelectDB(thread);
       if (FLAGS_multiread_stride) {
         int64_t key = GetRandomKey(&thread->rand);
diff --git a/scripts/sk2113-setvars.sh b/scripts/sk2113-setvars.sh
index 16cbe830d..498fd5e64 100755
--- a/scripts/sk2113-setvars.sh
+++ b/scripts/sk2113-setvars.sh
@@ -28,8 +28,8 @@ export PAPERGRAPHS=$PAPER/SC
 
 #export MACHINE_NAME="CLEMSON-APR8-MEMBUDGET"
 export MACHINE_NAME="CLEMSON"
-export OUTPUT_FOLDER=$NVMBASE/results/$MACHINE_NAME/CAMERA-OPT
-export OUTPUT_GRAPH_FOLDER=$NVMBASE/results/$MACHINE_NAME/CAMERA-OPT
+export OUTPUT_FOLDER=$NVMBASE/results/$MACHINE_NAME/SC-RESULTS
+export OUTPUT_GRAPH_FOLDER=$NVMBASE/results/$MACHINE_NAME/SC-RESULTS
 
 #export MACHINE_NAME="CLEMSON-PREFETCH-4THREADS"
 #export OUTPUT_FOLDER=$NVMBASE/results/$MACHINE_NAME/SC-RESULTS
diff --git a/shared_libs/simple_prefetcher/Makefile b/shared_libs/simple_prefetcher/Makefile
index b62a309be..361fbf95d 100644
--- a/shared_libs/simple_prefetcher/Makefile
+++ b/shared_libs/simple_prefetcher/Makefile
@@ -31,9 +31,9 @@ VAR_FLAGS+=-DNR_ADJACENT_CHECK=$(NR_ADJACENT_CHECK) -DMIN_FILE_SZ=$(MIN_FILE_SZ)
 
 
 ONLY_INTERCEPT=-DONLY_INTERCEPT
-DISABLE_FADV_RANDOM=#-DDISABLE_FADV_RANDOM ##Disables any FADV_RANDOM from App
-DISABLE_FADV_DONTNEED=#-DDISABLE_FADV_DONTNEED
-DISABLE_MADV_DONTNEED=#-DDISABLE_MADV_DONTNEED
+DISABLE_FADV_RANDOM=-DDISABLE_FADV_RANDOM ##Disables any FADV_RANDOM from App
+DISABLE_FADV_DONTNEED=-DDISABLE_FADV_DONTNEED
+DISABLE_MADV_DONTNEED=-DDISABLE_MADV_DONTNEED
 
 OS_ONLY=-DDISABLE_APP_READAHEADS
 
@@ -54,23 +54,24 @@ PREDICTOR_THPOOL_BLOCK_RA=-DTHPOOL_PREFETCH -DPREDICTOR
 
 #Budget approaches
 PREDICTOR_THPOOL_BLOCK_RA_BUDGET=-DTHPOOL_PREFETCH -DPREDICTOR -DMODIFIED_RA -DENABLE_EVICTION -DDISABLE_APP_READAHEADS
-PREDICTOR_BLOCK_RA_BUDGET_INFO_SYNC=-DPREDICTOR -DMODIFIED_RA -DREADAHEAD_INFO_PC_STATE -DDISABLE_APP_READAHEADS -DENABLE_EVICTION 
 
+PREDICTOR_THPOOL_BLOCK_RA_BUDGET_INFO=-DTHPOOL_PREFETCH -DPREDICTOR -DMODIFIED_RA -DENABLE_EVICTION -DREADAHEAD_INFO_PC_STATE -DDISABLE_APP_READAHEADS
 
+PREDICTOR_BLOCK_RA_BUDGET_INFO_SYNC=-DPREDICTOR -DMODIFIED_RA -DREADAHEAD_INFO_PC_STATE -DDISABLE_APP_READAHEADS -DENABLE_EVICTION 
 
-THPOOL_BLOCK_RA_BUDGET_INFO=-DTHPOOL_PREFETCH -DPREDICTOR -DMODIFIED_RA -DENABLE_EVICTION -DREADAHEAD_INFO_PC_STATE -DDISABLE_APP_READAHEADS -D_PERF_OPT #-DPREFETCH_BOOST
 
 
 
-PREDICTOR_THPOOL_BLOCK_RA_INFO=-DTHPOOL_PREFETCH -DPREDICTOR -DMODIFIED_RA -DREADAHEAD_INFO_PC_STATE -DDISABLE_APP_READAHEADS -DPREFETCH_BOOST
+PREDICTOR_THPOOL_BLOCK_RA_INFO=-DTHPOOL_PREFETCH -DPREDICTOR -DMODIFIED_RA -DREADAHEAD_INFO_PC_STATE -DDISABLE_APP_READAHEADS #-DPREFETCH_BOOST
 PREDICTOR_THPOOL_BLOCK_RA_INFO_SYNC=-DPREDICTOR -DMODIFIED_RA -DREADAHEAD_INFO_PC_STATE -DDISABLE_APP_READAHEADS #-DPREFETCH_BOOST
+
 CONCURRENT_PREDICTOR_THPOOL_BLOCK_RA_INFO=-DTHPOOL_PREFETCH -DPREDICTOR  -DMODIFIED_RA -DREADAHEAD_INFO_PC_STATE -DDISABLE_APP_READAHEADS -DCONCURRENT_PREDICTOR
 
 
 #all: Vanilla Cross_Blind OSonly INTERCEPT Cross_Info Cross_Info_Predict Cross_Info_Concurrent_Predict Cross_Info_Predict_IOOPT Cross_Pred_Budget_IOOPT Cross_Naive_IOOPT DISABLE_ADV Cross_Naive_full Vanilla_RA_IOOPT Vanilla_RA Cross_Info_IOOPT Cross_Info_sync Cross_Info_IOOPT_sync Cross_Info_Budget Cross_Info_Pred_Budget Cross_Info_Predict_sync CLEAR_STATS Cross_Info_Predict_IOOPT_sync
 
 
-all: Vanilla Cross_Blind OSonly Cross_Info Cross_Info_sync  Cross_Info_Predict Cross_Info_Predict_IOOPT Cross_Info_Predict_IOOPT_sync Cross_Info_IOOPT Cross_Info_IOOPT_sync Cross_Info_Pred_Budget Cross_Info_Pred_Budget_IOOPT Cross_Info_Pred_Budget_IOOPT_sync Cross_Info_Predict_sync Cross_Info_Pred_Budget_IOOPT_STATIC
+all: Vanilla Cross_Blind OSonly Cross_Info Cross_Info_sync  Cross_Info_Predict Cross_Info_Predict_IOOPT Cross_Info_Predict_IOOPT_sync Cross_Info_IOOPT Cross_Info_IOOPT_sync Cross_Info_Pred_Budget Cross_Info_Pred_Budget_IOOPT Cross_Info_Pred_Budget_IOOPT_sync Cross_Info_Predict_sync
 #DISABLE_ADV Vanilla_RA_IOOPT Vanilla_RA Cross_Info_IOOPT Cross_Info_sync Cross_Info_IOOPT_sync Cross_Info_Budget Cross_Info_Pred_Budget Cross_Info_Predict_sync CLEAR_STATS Cross_Info_Predict_IOOPT_sync INTERCEPT
 
 
@@ -132,12 +133,14 @@ Cross_Info_Predict_IOOPT_sync: $(SOURCES)
 	    
 Cross_Info_Pred_Budget: $(SOURCES)
 	$(CXX) $(INCLUDE) $(FLAGS) -o lib_CIPB.so $^ $(LIBS) $(DEBUG) \
-	    $(VAR_FLAGS) $(DISABLE_FADV_RANDOM) $(THPOOL_BLOCK_RA_BUDGET_INFO)
+	    $(VAR_FLAGS) $(DISABLE_FADV_RANDOM) $(PREDICTOR_THPOOL_BLOCK_RA_BUDGET_INFO)
 
 
 Cross_Info_Pred_Budget_IOOPT: $(SOURCES)
 	$(CXX) $(INCLUDE) $(FLAGS) -o lib_CPBI.so $^ $(LIBS) $(DEBUG) \
-	    $(VAR_FLAGS) $(THPOOL_BLOCK_RA_BUDGET_INFO) $(DISABLE_FADV_RANDOM)  #-DSET_READ_UNLIMITED -DUNSET_2MB_RA_LIMIT
+	    $(VAR_FLAGS) $(DISABLE_FADV_RANDOM) $(PREDICTOR_THPOOL_BLOCK_RA_BUDGET_INFO) -DSET_READ_UNLIMITED -DUNSET_2MB_RA_LIMIT
+
+
 
 Cross_Info_Pred_Budget_IOOPT_sync: $(SOURCES)
 	$(CXX) $(INCLUDE) $(FLAGS) -o lib_CPBI_sync.so $^ $(LIBS) $(DEBUG) \
@@ -145,21 +148,6 @@ Cross_Info_Pred_Budget_IOOPT_sync: $(SOURCES)
 	    -DSET_READ_UNLIMITED -DUNSET_2MB_RA_LIMIT
 
 
-Cross_Info_Pred_Budget_IOOPT_STATIC: $(SOURCES)
-	g++ -c -std=c++14 -O3 -Wno-unused-result -o frontend.o frontend.cpp $(LIBS) $(DEBUG)  $(VAR_FLAGS) $(THPOOL_BLOCK_RA_BUDGET_INFO) $(DISABLE_FADV_RANDOM)
-	g++ -c -std=c++14 -O3 -Wno-unused-result -o predictor.o predictor.cpp $(LIBS) $(DEBUG)  $(VAR_FLAGS) $(THPOOL_BLOCK_RA_BUDGET_INFO) $(DISABLE_FADV_RANDOM)
-	g++ -c -std=c++14 -O3 -Wno-unused-result -o uinode.o uinode.cpp $(LIBS) $(DEBUG)  $(VAR_FLAGS) $(THPOOL_BLOCK_RA_BUDGET_INFO) $(DISABLE_FADV_RANDOM)
-	g++ -c -std=c++14 -O3 -Wno-unused-result -o mpiio.o mpiio.cpp $(LIBS) $(DEBUG)  $(VAR_FLAGS) $(THPOOL_BLOCK_RA_BUDGET_INFO) $(DISABLE_FADV_RANDOM)
-	g++ -c -std=c++14 -O3 -Wno-unused-result -o thpool.o utils/thpool.c $(LIBS) $(DEBUG)  $(VAR_FLAGS) $(THPOOL_BLOCK_RA_BUDGET_INFO) $(DISABLE_FADV_RANDOM)
-	g++ -c -std=c++14 -O3 -Wno-unused-result -o bitarray.o utils/bitarray.c $(LIBS) $(DEBUG)  $(VAR_FLAGS) $(THPOOL_BLOCK_RA_BUDGET_INFO) $(DISABLE_FADV_RANDOM)
-	g++ -c -std=c++14 -O3 -Wno-unused-result -o hashtable.o utils/hashtable.c $(LIBS) $(DEBUG)  $(VAR_FLAGS) $(THPOOL_BLOCK_RA_BUDGET_INFO) $(DISABLE_FADV_RANDOM)
-	g++ -c -std=c++14 -O3 -Wno-unused-result -o thpool-simple.o utils/thpool-simple.c $(LIBS) $(DEBUG)  $(VAR_FLAGS) $(THPOOL_BLOCK_RA_BUDGET_INFO) $(DISABLE_FADV_RANDOM)
-	# Create a static library
-	ar rcs lib_CPBI.a frontend.o predictor.o uinode.o mpiio.o thpool.o bitarray.o hashtable.o thpool-simple.o
-	# Clean up the object files
-	rm frontend.o predictor.o uinode.o mpiio.o thpool.o bitarray.o hashtable.o thpool-simple.o
-
-
 
 
 
@@ -230,8 +218,6 @@ CLEAR_STATS: clear-stats.c
 install:
 	sudo cp *.so /usr/local/lib
 	sudo cp *.so /usr/lib
-	sudo cp *.a  /usr/lib
-	sudo cp *.a  /usr/local/lib/
 	#sudo cp clear_os_stats /usr/bin
 
 clean:
diff --git a/shared_libs/simple_prefetcher/compile.sh b/shared_libs/simple_prefetcher/compile.sh
index 90a7978f4..2925cb7a4 100755
--- a/shared_libs/simple_prefetcher/compile.sh
+++ b/shared_libs/simple_prefetcher/compile.sh
@@ -9,8 +9,11 @@
 # performance will go down.
 
 #sudo apt update; sudo apt install mpich -y
-PREFETCH_SIZE_VAR=1024
-NR_WORKERS_VAR=1
+PREFETCH_SIZE_VAR=8192
+#PREFETCH_SIZE_VAR=512
+#PREFETCH_SIZE_VAR=32
+#PREFETCH_SIZE_VAR=16
+NR_WORKERS_VAR=4
 CROSS_BITMAP_SHIFT=36
 NR_PREDICT_SAMPLE_FREQ=8
 make -j$(nproc) NR_RA_PAGES=$PREFETCH_SIZE_VAR NR_WORKERS=$NR_WORKERS_VAR CROSS_BITMAP_SHIFT=$CROSS_BITMAP_SHIFT
diff --git a/shared_libs/simple_prefetcher/frontend.cpp b/shared_libs/simple_prefetcher/frontend.cpp
index 75aa22168..215da2314 100644
--- a/shared_libs/simple_prefetcher/frontend.cpp
+++ b/shared_libs/simple_prefetcher/frontend.cpp
@@ -226,16 +226,12 @@ long readahead_info_wrap(int fd, off64_t offset, size_t count, struct
 #endif
 	{
 		err = readahead_info(fd, offset, count, ra);
-
-#ifndef _PERF_OPT
 #ifdef ENABLE_EVICTION
 		update_prefetch_bytes(count, 1);
 #endif
-#endif
-
 	}
 #ifdef ENABLE_EVICTION
-        //update_lru(uinode);
+        update_lru(uinode);
 #endif
         return err;
 }
@@ -303,6 +299,7 @@ void con(){
 	link_shim_functions();
 
 #ifdef THPOOL_PREFETCH
+
 	workerpool = thpool_init(NR_WORKERS);
 	if(!workerpool){
 		printf("%s:FAILED creating thpool with %d threads\n", __func__, NR_WORKERS);
@@ -362,9 +359,6 @@ void dest(){
 	char a;
 	a = '0';
 	set_read_limits(a);
-
-	return;
-
 	set_readahead_2mb_limit(a);
 
 	fprintf(stderr, "DESTRUCTOR GETTING CALLED \n");
@@ -514,14 +508,9 @@ long update_offset_pc_state(struct u_inode *uinode, bit_array_t *page_cache_stat
 		goto exit;
 	}
 
-#ifndef _PERF_OPT
 	uinode_bitmap_lock(uinode);
-#endif
 	pc_array = page_cache_state->array;
-
-#ifndef _PERF_OPT	
 	uinode_bitmap_unlock(uinode);
-#endif
 
 	while((check_pg << PAGE_SHIFT) < uinode->file_size) {
 
@@ -533,20 +522,14 @@ long update_offset_pc_state(struct u_inode *uinode, bit_array_t *page_cache_stat
 	}
 	pg_diff = check_pg - start_pg;
 
-#ifndef _PERF_OPT
 	uinode_bitmap_lock(uinode);
-#endif
 
 	uinode->prefetched_bytes += (pg_diff << PAGE_SHIFT);
 
 	if(uinode->prefetched_bytes > uinode->file_size){
 		uinode->fully_prefetched.store(true);
 	}
-
-#ifndef _PERF_OPT
 	uinode_bitmap_unlock(uinode);
-#endif
-
 exit:
 	return pg_diff;
 }
@@ -681,21 +664,15 @@ void prefetcher_th(void *arg) {
 
 		//struct timeval start, end;
 		//gettimeofday(&start, NULL);
-
-#ifndef _PERF_OPT
 		uinode_bitmap_lock(a->uinode);
 		err = readahead_info_wrap(a->fd, file_pos, a->prefetch_size, &ra, a->uinode);
-#endif
+		//err = readahead(a->fd, file_pos, a->prefetch_size);
 		if(err < -10){
-#ifndef _PERF_OPT
 			uinode_bitmap_unlock(a->uinode);
-#endif
 			goto exit_prefetcher_th;
 		}
 		else if(err < 0){
-#ifndef _PERF_OPT
 			uinode_bitmap_unlock(a->uinode);
-#endif
 			//printf("readahead_info: failed fd:%d TID:%ld err:%ld\n", a->fd, tid, err);
 			goto exit_prefetcher_th;
 		}
@@ -707,7 +684,7 @@ void prefetcher_th(void *arg) {
 				a->file_size, nr_bytes_ra_done, a->uinode->ino);
 		}
 #endif
-		//uinode_bitmap_unlock(a->uinode);
+		uinode_bitmap_unlock(a->uinode);
 
 //#ifdef ENABLE_EVICTION
 //		update_lru(a->uinode);
@@ -1205,6 +1182,8 @@ void read_predictor(FILE *stream, size_t data_size, int file_fd, off_t file_offs
 	}
 #endif
 
+
+
 	if(file_fd >= 3){
 		fd = file_fd;
 		offset = file_offset;
@@ -1256,7 +1235,6 @@ void handle_file_close(int fd){
 
 #ifdef MAINTAIN_UINODE
 	int i_fd_cnt = handle_close(i_map, fd);
-
 #ifdef ENABLE_EVICTION
 	if(!i_fd_cnt){
 		evict_advise(fd);
@@ -1266,25 +1244,25 @@ void handle_file_close(int fd){
 
 
 #ifdef PREDICTOR
-	//init_global_ds();
+	init_global_ds();
 	file_predictor *fp;
 	try{
 		debug_printf("%s: found fd %d in fd_to_file_pred\n", __func__, fd);
-		//std::lock_guard<std::mutex> guard(fp_mutex);
-		//fp = fd_to_file_pred.at(fd);
-		//fd_to_file_pred.erase(fd);
+		std::lock_guard<std::mutex> guard(fp_mutex);
+		fp = fd_to_file_pred.at(fd);
+		fd_to_file_pred.erase(fd);
 	}
 	catch(const std::out_of_range){
 		debug_printf("%s: unable to find fd %d in fd_to_file_pred\n", __func__, fd);
 		goto exit_handle_file_close;
 	}
 
-	//if(fp){
-	//	delete(fp);
-	//}
+	if(fp){
+		delete(fp);
+	}
 #endif
 
-exit_handle_file_close:
+	exit_handle_file_close:
 	debug_printf("Exiting %s\n", __func__);
 	return;
 }
@@ -1578,8 +1556,6 @@ int posix_fadvise(int fd, off_t offset, off_t len, int advice){
 	int ret = 0;
 	debug_printf("%s: called for %d, ADV=%d\n", __func__, fd, advice);
 
-	//goto listen_to_app;
-
 #ifdef ENABLE_EVICTION
 	if(is_memory_danger_low() ) {
 		//printf("%s:%d mem dangerously low\n", __func__, __LINE__);
diff --git a/shared_libs/simple_prefetcher/uinode.cpp b/shared_libs/simple_prefetcher/uinode.cpp
index 3c6e8167c..17887199d 100644
--- a/shared_libs/simple_prefetcher/uinode.cpp
+++ b/shared_libs/simple_prefetcher/uinode.cpp
@@ -295,20 +295,15 @@ void remove_fd_from_uinode(struct u_inode *uinode, int fd){
 
 
 bool is_file_closed(struct u_inode *uinode, int fd){
-
-#ifndef _PERF_OPT
 	if(!uinode)
 		return false;
 
-	for(int i=0; i < uinode->fdcount; i++){
+	for(int i=0; i<MAX_FD_PER_INODE; i++){
 		if(uinode->fdlist[i] == fd){
 			return false;
 		}
 	}
 	return true;
-#else
-	return false;
-#endif
 }
 
 
@@ -461,9 +456,7 @@ unsigned long mem_low_watermark(){
 	struct sysinfo si;
         sysinfo (&si);
 
-       //return (si.freeram - MEM_OTHER_NUMA_NODE <= MEM_LOW_WATERMARK);
-        return (si.freeram <= MEM_LOW_WATERMARK);
-
+        return (si.freeram - MEM_OTHER_NUMA_NODE <= MEM_LOW_WATERMARK);
 }
 
 unsigned long mem_danger_watermark(){
@@ -472,8 +465,7 @@ unsigned long mem_danger_watermark(){
 
 	debug_printf("si.freeram %ld MEM_OTHER_NUMA_NODE %ld diff %ld MEM_DANGER_WATERMARK %ld \n", 
 			si.freeram, MEM_OTHER_NUMA_NODE, si.freeram - MEM_OTHER_NUMA_NODE,  MEM_DANGER_WATERMARK);
-        return (si.freeram <= MEM_DANGER_WATERMARK);
-	//return (si.freeram - MEM_OTHER_NUMA_NODE <= MEM_DANGER_WATERMARK);
+        return (si.freeram - MEM_OTHER_NUMA_NODE <= MEM_DANGER_WATERMARK);
 }
 
 
@@ -555,7 +547,6 @@ int evict_inode_from_mem(void){
                         set_memory_danger_low(false);
                 }else {
 			dangermem=1;
-			set_memory_danger_low(true);
 		}
 
 		/*
@@ -566,7 +557,6 @@ int evict_inode_from_mem(void){
 			return 0;
                 }else {
 			lowmem=1;
-			set_memory_low(true);
 		}
 
 		uinode = get_lru_victim();
@@ -606,8 +596,6 @@ void evict_inactive_inodes(void *arg){
         struct hashtable *i_map = (struct hashtable *)arg;
         int tot_inodes;
 
-	return;
-
         while(true){
 retry:
                 tot_inodes = hashtable_count(i_map);
