+ REDISROOT=/users/skannan/ssd/NVM/appbench/redis-5.0.5
+ REDISCONF=/users/skannan/ssd/NVM/appbench/redis-5.0.5/config
+ APPBASE=/users/skannan/ssd/NVM/appbench/redis-5.0.5/src
+ APP=/users/skannan/ssd/NVM/appbench/redis-5.0.5/src/pagerank
+ PARAM=
+ OUTPUT=
+ READS=1000000
+ KEYS=1000000
+ CLIPREFIX='numactl --preferred=0'
+ PHYSCPU=--physcpubind
+ let MAXINST=4
+ let STARTPORT=6378
+ let SERVERCPU=20
+ let DATASIZE=4096
+ let physcpu=0
+ let physcpu2=1
+ cd /users/skannan/ssd/NVM/appbench/redis-5.0.5/src
+ CLEAN
+ (( b=1 ))
+ (( b<=4 ))
+ rm -rf '*.rdb'
+ rm -rf '*.aof'
+ sudo killall redis-server1
redis-server1: no process found
+ sudo killall redis-server1
redis-server1: no process found
+ echo 'KILLING redis-server1'
KILLING redis-server1
+ (( b++  ))
+ (( b<=4 ))
+ rm -rf '*.rdb'
+ rm -rf '*.aof'
+ sudo killall redis-server2
redis-server2: no process found
+ sudo killall redis-server2
redis-server2: no process found
+ echo 'KILLING redis-server2'
KILLING redis-server2
+ (( b++  ))
+ (( b<=4 ))
+ rm -rf '*.rdb'
+ rm -rf '*.aof'
+ sudo killall redis-server3
redis-server3: no process found
+ sudo killall redis-server3
redis-server3: no process found
+ echo 'KILLING redis-server3'
KILLING redis-server3
+ (( b++  ))
+ (( b<=4 ))
+ rm -rf '*.rdb'
+ rm -rf '*.aof'
+ sudo killall redis-server4
redis-server4: no process found
+ sudo killall redis-server4
redis-server4: no process found
+ echo 'KILLING redis-server4'
KILLING redis-server4
+ (( b++  ))
+ (( b<=4 ))
+ sudo killall redis-benchmark
redis-benchmark: no process found
+ sudo killall redis-benchmark
redis-benchmark: no process found
+ sleep 5
+ PREPARE
+ (( inst=1 ))
+ (( inst<=4 ))
+ cd /users/skannan/ssd/NVM/appbench/redis-5.0.5/src
+ sudo rm redis-server1 redis-benchmark1
+ cp redis-server redis-server1
+ cp redis-benchmark redis-benchmark1
+ cd /users/skannan/ssd/NVM/appbench
+ (( inst++  ))
+ (( inst<=4 ))
+ cd /users/skannan/ssd/NVM/appbench/redis-5.0.5/src
+ sudo rm redis-server2 redis-benchmark2
+ cp redis-server redis-server2
+ cp redis-benchmark redis-benchmark2
+ cd /users/skannan/ssd/NVM/appbench
+ (( inst++  ))
+ (( inst<=4 ))
+ cd /users/skannan/ssd/NVM/appbench/redis-5.0.5/src
+ sudo rm redis-server3 redis-benchmark3
+ cp redis-server redis-server3
+ cp redis-benchmark redis-benchmark3
+ cd /users/skannan/ssd/NVM/appbench
+ (( inst++  ))
+ (( inst<=4 ))
+ cd /users/skannan/ssd/NVM/appbench/redis-5.0.5/src
+ sudo rm redis-server4 redis-benchmark4
+ cp redis-server redis-server4
+ cp redis-benchmark redis-benchmark4
+ cd /users/skannan/ssd/NVM/appbench
+ (( inst++  ))
+ (( inst<=4 ))
+ FlushDisk
+ sudo sh -c 'echo 3 > /proc/sys/vm/drop_caches'
+ sudo sh -c sync
+ sudo sh -c sync
+ sudo sh -c 'echo 3 > /proc/sys/vm/drop_caches'
+ cd /users/skannan/ssd/NVM/appbench/shared_data
/users/skannan/ssd/NVM/appbench/redis-5.0.5/src/run.sh: line 103: cd: /users/skannan/ssd/NVM/appbench/shared_data: No such file or directory
+ RUN
+ let port=6378
+ let physcpu=20
+ let physcpu2=20+1
+ (( r=1 ))
+ (( r<=4 ))
+ let port=6378+1
+ let physcpu=20+2
+ let physcpu2=21+2
+ sleep 1
+ LD_PRELOAD=/users/skannan/ssd/NVM/appbench/shared_libs/construct/libmigration.so
+ numactl --membind=0 --physcpubind=20,21 /users/skannan/ssd/NVM/appbench/redis-5.0.5/src/redis-server1 /users/skannan/ssd/NVM/appbench/redis-5.0.5/config/redis-6378.conf
15173:C 29 Jul 2019 05:48:42.540 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo
15173:C 29 Jul 2019 05:48:42.540 # Redis version=5.0.5, bits=64, commit=ca9ca7e7, modified=1, pid=15173, just started
15173:C 29 Jul 2019 05:48:42.540 # Configuration loaded
15173:M 29 Jul 2019 05:48:42.541 # You requested maxclients of 10000 requiring at least 10032 max file descriptors.
15173:M 29 Jul 2019 05:48:42.541 # Server can't set maximum open files to 10032 because of OS error: Operation not permitted.
15173:M 29 Jul 2019 05:48:42.541 # Current maximum open files is 4096. maxclients has been reduced to 4064 to compensate for low ulimit. If you need higher maxclients increase 'ulimit -n'.
                _._                                                  
           _.-``__ ''-._                                             
      _.-``    `.  `_.  ''-._           Redis 5.0.5 (ca9ca7e7/1) 64 bit
  .-`` .-```.  ```\/    _.,_ ''-._                                   
 (    '      ,       .-`  | `,    )     Running in standalone mode
 |`-._`-...-` __...-.``-._|'` _.-'|     Port: 6378
 |    `-._   `._    /     _.-'    |     PID: 15173
  `-._    `-._  `-./  _.-'    _.-'                                   
 |`-._`-._    `-.__.-'    _.-'_.-'|                                  
 |    `-._`-._        _.-'_.-'    |           http://redis.io        
  `-._    `-._`-.__.-'_.-'    _.-'                                   
 |`-._`-._    `-.__.-'    _.-'_.-'|                                  
 |    `-._`-._        _.-'_.-'    |                                  
  `-._    `-._`-.__.-'_.-'    _.-'                                   
      `-._    `-.__.-'    _.-'                                       
          `-._        _.-'                                           
              `-.__.-'                                               

15173:M 29 Jul 2019 05:48:42.556 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.
15173:M 29 Jul 2019 05:48:42.556 # Server initialized
15173:M 29 Jul 2019 05:48:42.556 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.
15173:M 29 Jul 2019 05:48:42.556 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command 'echo never > /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.
15173:M 29 Jul 2019 05:48:42.556 * Ready to accept connections
+ (( r++ ))
+ (( r<=4 ))
+ let port=6379+1
+ let physcpu=22+2
+ let physcpu2=23+2
+ sleep 1
+ LD_PRELOAD=/users/skannan/ssd/NVM/appbench/shared_libs/construct/libmigration.so
+ numactl --membind=0 --physcpubind=22,23 /users/skannan/ssd/NVM/appbench/redis-5.0.5/src/redis-server2 /users/skannan/ssd/NVM/appbench/redis-5.0.5/config/redis-6379.conf
15178:C 29 Jul 2019 05:48:43.509 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo
15178:C 29 Jul 2019 05:48:43.509 # Redis version=5.0.5, bits=64, commit=ca9ca7e7, modified=1, pid=15178, just started
15178:C 29 Jul 2019 05:48:43.509 # Configuration loaded
15178:M 29 Jul 2019 05:48:43.510 # You requested maxclients of 10000 requiring at least 10032 max file descriptors.
15178:M 29 Jul 2019 05:48:43.510 # Server can't set maximum open files to 10032 because of OS error: Operation not permitted.
15178:M 29 Jul 2019 05:48:43.510 # Current maximum open files is 4096. maxclients has been reduced to 4064 to compensate for low ulimit. If you need higher maxclients increase 'ulimit -n'.
                _._                                                  
           _.-``__ ''-._                                             
      _.-``    `.  `_.  ''-._           Redis 5.0.5 (ca9ca7e7/1) 64 bit
  .-`` .-```.  ```\/    _.,_ ''-._                                   
 (    '      ,       .-`  | `,    )     Running in standalone mode
 |`-._`-...-` __...-.``-._|'` _.-'|     Port: 6379
 |    `-._   `._    /     _.-'    |     PID: 15178
  `-._    `-._  `-./  _.-'    _.-'                                   
 |`-._`-._    `-.__.-'    _.-'_.-'|                                  
 |    `-._`-._        _.-'_.-'    |           http://redis.io        
  `-._    `-._`-.__.-'_.-'    _.-'                                   
 |`-._`-._    `-.__.-'    _.-'_.-'|                                  
 |    `-._`-._        _.-'_.-'    |                                  
  `-._    `-._`-.__.-'_.-'    _.-'                                   
      `-._    `-.__.-'    _.-'                                       
          `-._        _.-'                                           
              `-.__.-'                                               

15178:M 29 Jul 2019 05:48:43.511 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.
15178:M 29 Jul 2019 05:48:43.511 # Server initialized
15178:M 29 Jul 2019 05:48:43.511 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.
15178:M 29 Jul 2019 05:48:43.511 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command 'echo never > /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.
15178:M 29 Jul 2019 05:48:43.511 * Ready to accept connections
+ (( r++ ))
+ (( r<=4 ))
+ let port=6380+1
+ let physcpu=24+2
+ let physcpu2=25+2
+ sleep 1
+ LD_PRELOAD=/users/skannan/ssd/NVM/appbench/shared_libs/construct/libmigration.so
+ numactl --membind=0 --physcpubind=24,25 /users/skannan/ssd/NVM/appbench/redis-5.0.5/src/redis-server3 /users/skannan/ssd/NVM/appbench/redis-5.0.5/config/redis-6380.conf
15183:C 29 Jul 2019 05:48:44.510 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo
15183:C 29 Jul 2019 05:48:44.510 # Redis version=5.0.5, bits=64, commit=ca9ca7e7, modified=1, pid=15183, just started
15183:C 29 Jul 2019 05:48:44.510 # Configuration loaded
15183:M 29 Jul 2019 05:48:44.511 # You requested maxclients of 10000 requiring at least 10032 max file descriptors.
15183:M 29 Jul 2019 05:48:44.511 # Server can't set maximum open files to 10032 because of OS error: Operation not permitted.
15183:M 29 Jul 2019 05:48:44.511 # Current maximum open files is 4096. maxclients has been reduced to 4064 to compensate for low ulimit. If you need higher maxclients increase 'ulimit -n'.
                _._                                                  
           _.-``__ ''-._                                             
      _.-``    `.  `_.  ''-._           Redis 5.0.5 (ca9ca7e7/1) 64 bit
  .-`` .-```.  ```\/    _.,_ ''-._                                   
 (    '      ,       .-`  | `,    )     Running in standalone mode
 |`-._`-...-` __...-.``-._|'` _.-'|     Port: 6380
 |    `-._   `._    /     _.-'    |     PID: 15183
  `-._    `-._  `-./  _.-'    _.-'                                   
 |`-._`-._    `-.__.-'    _.-'_.-'|                                  
 |    `-._`-._        _.-'_.-'    |           http://redis.io        
  `-._    `-._`-.__.-'_.-'    _.-'                                   
 |`-._`-._    `-.__.-'    _.-'_.-'|                                  
 |    `-._`-._        _.-'_.-'    |                                  
  `-._    `-._`-.__.-'_.-'    _.-'                                   
      `-._    `-.__.-'    _.-'                                       
          `-._        _.-'                                           
              `-.__.-'                                               

15183:M 29 Jul 2019 05:48:44.512 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.
15183:M 29 Jul 2019 05:48:44.512 # Server initialized
15183:M 29 Jul 2019 05:48:44.512 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.
15183:M 29 Jul 2019 05:48:44.512 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command 'echo never > /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.
15183:M 29 Jul 2019 05:48:44.512 * Ready to accept connections
+ (( r++ ))
+ (( r<=4 ))
+ let port=6381+1
+ let physcpu=26+2
+ let physcpu2=27+2
+ sleep 1
+ LD_PRELOAD=/users/skannan/ssd/NVM/appbench/shared_libs/construct/libmigration.so
+ numactl --membind=0 --physcpubind=26,27 /users/skannan/ssd/NVM/appbench/redis-5.0.5/src/redis-server4 /users/skannan/ssd/NVM/appbench/redis-5.0.5/config/redis-6381.conf
15188:C 29 Jul 2019 05:48:45.512 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo
15188:C 29 Jul 2019 05:48:45.512 # Redis version=5.0.5, bits=64, commit=ca9ca7e7, modified=1, pid=15188, just started
15188:C 29 Jul 2019 05:48:45.512 # Configuration loaded
15188:M 29 Jul 2019 05:48:45.513 # You requested maxclients of 10000 requiring at least 10032 max file descriptors.
15188:M 29 Jul 2019 05:48:45.513 # Server can't set maximum open files to 10032 because of OS error: Operation not permitted.
15188:M 29 Jul 2019 05:48:45.513 # Current maximum open files is 4096. maxclients has been reduced to 4064 to compensate for low ulimit. If you need higher maxclients increase 'ulimit -n'.
                _._                                                  
           _.-``__ ''-._                                             
      _.-``    `.  `_.  ''-._           Redis 5.0.5 (ca9ca7e7/1) 64 bit
  .-`` .-```.  ```\/    _.,_ ''-._                                   
 (    '      ,       .-`  | `,    )     Running in standalone mode
 |`-._`-...-` __...-.``-._|'` _.-'|     Port: 6381
 |    `-._   `._    /     _.-'    |     PID: 15188
  `-._    `-._  `-./  _.-'    _.-'                                   
 |`-._`-._    `-.__.-'    _.-'_.-'|                                  
 |    `-._`-._        _.-'_.-'    |           http://redis.io        
  `-._    `-._`-.__.-'_.-'    _.-'                                   
 |`-._`-._    `-.__.-'    _.-'_.-'|                                  
 |    `-._`-._        _.-'_.-'    |                                  
  `-._    `-._`-.__.-'_.-'    _.-'                                   
      `-._    `-.__.-'    _.-'                                       
          `-._        _.-'                                           
              `-.__.-'                                               

15188:M 29 Jul 2019 05:48:45.515 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.
15188:M 29 Jul 2019 05:48:45.515 # Server initialized
15188:M 29 Jul 2019 05:48:45.515 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.
15188:M 29 Jul 2019 05:48:45.515 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command 'echo never > /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.
15188:M 29 Jul 2019 05:48:45.515 * Ready to accept connections
+ (( r++ ))
+ (( r<=4 ))
+ export LD_PRELOAD=
+ LD_PRELOAD=
+ sleep 10
+ RUNCLIENT
+ let port=6378
+ let physcpu=2
+ let physcpu2=3
+ PARAMS=' -r 1000000 -n 1000000 -c 50 -t get,set -P 16 -q  -h 127.0.0.1 -d 4096'
+ (( c=1 ))
+ (( c<4 ))
+ let port=6378+1
+ let physcpu=2+1
+ let physcpu2=3+2
+ (( c++ ))
+ (( c<4 ))
+ numactl --preferred=0 /users/skannan/ssd/NVM/appbench/redis-5.0.5/src/redis-benchmark -r 1000000 -n 1000000 -c 50 -t get,set -P 16 -q -h 127.0.0.1 -d 4096 -p 6378
+ let port=6379+1
+ let physcpu=3+1
+ let physcpu2=5+2
+ (( c++ ))
+ (( c<4 ))
+ numactl --preferred=0 /users/skannan/ssd/NVM/appbench/redis-5.0.5/src/redis-benchmark -r 1000000 -n 1000000 -c 50 -t get,set -P 16 -q -h 127.0.0.1 -d 4096 -p 6379
+ let port=6380+1
+ let physcpu=4+1
+ let physcpu2=7+2
+ (( c++ ))
+ (( c<4 ))
+ numactl --preferred=0 /users/skannan/ssd/NVM/appbench/redis-5.0.5/src/redis-benchmark -r 1000000 -n 1000000 -c 50 -t get,set -P 16 -q -h 127.0.0.1 -d 4096 -p 6381
+ numactl --preferred=0 /users/skannan/ssd/NVM/appbench/redis-5.0.5/src/redis-benchmark -r 1000000 -n 1000000 -c 50 -t get,set -P 16 -q -h 127.0.0.1 -d 4096 -p 6380
15183:M 29 Jul 2019 05:48:56.739 * Starting automatic rewriting of AOF on 7978052800% growth
15188:M 29 Jul 2019 05:48:56.740 * Starting automatic rewriting of AOF on 7853408700% growth
15183:M 29 Jul 2019 05:48:56.740 * Background append only file rewriting started by pid 15203
15178:M 29 Jul 2019 05:48:56.740 * Starting automatic rewriting of AOF on 7849267700% growth
15188:M 29 Jul 2019 05:48:56.741 * Background append only file rewriting started by pid 15204
15178:M 29 Jul 2019 05:48:56.742 * Background append only file rewriting started by pid 15205
15173:M 29 Jul 2019 05:48:56.785 * Starting automatic rewriting of AOF on 9507738200% growth
15173:M 29 Jul 2019 05:48:56.787 * Background append only file rewriting started by pid 15206
15188:M 29 Jul 2019 05:48:57.853 * AOF rewrite child asks to stop sending diffs.
15204:C 29 Jul 2019 05:48:57.853 * Parent agreed to stop sending diffs. Finalizing AOF...
15204:C 29 Jul 2019 05:48:57.853 * Concatenating 264.81 MB of AOF diff received from parent.
15178:M 29 Jul 2019 05:48:57.854 * AOF rewrite child asks to stop sending diffs.
15205:C 29 Jul 2019 05:48:57.854 * Parent agreed to stop sending diffs. Finalizing AOF...
15205:C 29 Jul 2019 05:48:57.854 * Concatenating 264.12 MB of AOF diff received from parent.
15183:M 29 Jul 2019 05:48:57.871 * AOF rewrite child asks to stop sending diffs.
15203:C 29 Jul 2019 05:48:57.871 * Parent agreed to stop sending diffs. Finalizing AOF...
15203:C 29 Jul 2019 05:48:57.871 * Concatenating 246.56 MB of AOF diff received from parent.
15173:M 29 Jul 2019 05:48:57.926 * AOF rewrite child asks to stop sending diffs.
15206:C 29 Jul 2019 05:48:57.926 * Parent agreed to stop sending diffs. Finalizing AOF...
15206:C 29 Jul 2019 05:48:57.926 * Concatenating 270.62 MB of AOF diff received from parent.
15188:M 29 Jul 2019 05:48:58.121 * Background AOF buffer size: 80 MB
15178:M 29 Jul 2019 05:48:58.128 * Background AOF buffer size: 80 MB
15183:M 29 Jul 2019 05:48:58.135 * Background AOF buffer size: 80 MB
15173:M 29 Jul 2019 05:48:58.240 * Background AOF buffer size: 80 MB
15188:M 29 Jul 2019 05:48:58.761 * Background AOF buffer size: 180 MB
15178:M 29 Jul 2019 05:48:58.771 * Background AOF buffer size: 180 MB
15183:M 29 Jul 2019 05:48:58.778 * Background AOF buffer size: 180 MB
15173:M 29 Jul 2019 05:48:58.867 * Background AOF buffer size: 180 MB
15188:M 29 Jul 2019 05:48:59.121 * Background AOF buffer size: 280 MB
15183:M 29 Jul 2019 05:48:59.129 * Background AOF buffer size: 280 MB
15178:M 29 Jul 2019 05:48:59.140 * Background AOF buffer size: 280 MB
15173:M 29 Jul 2019 05:48:59.222 * Background AOF buffer size: 280 MB
15183:M 29 Jul 2019 05:48:59.462 * Background AOF buffer size: 380 MB
15188:M 29 Jul 2019 05:48:59.463 * Background AOF buffer size: 380 MB
15178:M 29 Jul 2019 05:48:59.488 * Background AOF buffer size: 380 MB
15173:M 29 Jul 2019 05:48:59.566 * Background AOF buffer size: 380 MB
15183:M 29 Jul 2019 05:48:59.798 * Background AOF buffer size: 480 MB
15188:M 29 Jul 2019 05:48:59.814 * Background AOF buffer size: 480 MB
15178:M 29 Jul 2019 05:48:59.845 * Background AOF buffer size: 480 MB
15173:M 29 Jul 2019 05:48:59.917 * Background AOF buffer size: 480 MB
15188:M 29 Jul 2019 05:49:00.006 * Asynchronous AOF fsync is taking too long (disk is busy?). Writing the AOF buffer without waiting for fsync to complete, this may slow down Redis.
15183:M 29 Jul 2019 05:49:00.016 * Asynchronous AOF fsync is taking too long (disk is busy?). Writing the AOF buffer without waiting for fsync to complete, this may slow down Redis.
15173:M 29 Jul 2019 05:49:00.043 * Asynchronous AOF fsync is taking too long (disk is busy?). Writing the AOF buffer without waiting for fsync to complete, this may slow down Redis.
15178:M 29 Jul 2019 05:49:00.103 * Asynchronous AOF fsync is taking too long (disk is busy?). Writing the AOF buffer without waiting for fsync to complete, this may slow down Redis.
15183:M 29 Jul 2019 05:49:00.647 * Background AOF buffer size: 580 MB
15178:M 29 Jul 2019 05:49:00.676 * Background AOF buffer size: 580 MB
15188:M 29 Jul 2019 05:49:00.716 * Background AOF buffer size: 580 MB
15173:M 29 Jul 2019 05:49:00.734 * Background AOF buffer size: 580 MB
15183:M 29 Jul 2019 05:49:00.964 * Background AOF buffer size: 680 MB
15178:M 29 Jul 2019 05:49:00.997 * Background AOF buffer size: 680 MB
15188:M 29 Jul 2019 05:49:01.025 * Background AOF buffer size: 680 MB
15173:M 29 Jul 2019 05:49:01.063 * Background AOF buffer size: 680 MB
15183:M 29 Jul 2019 05:49:01.265 * Background AOF buffer size: 780 MB
15178:M 29 Jul 2019 05:49:01.310 * Background AOF buffer size: 780 MB
15188:M 29 Jul 2019 05:49:01.330 * Background AOF buffer size: 780 MB
15173:M 29 Jul 2019 05:49:01.371 * Background AOF buffer size: 780 MB
15183:M 29 Jul 2019 05:49:01.566 * Background AOF buffer size: 880 MB
15178:M 29 Jul 2019 05:49:01.624 * Background AOF buffer size: 880 MB
15188:M 29 Jul 2019 05:49:01.636 * Background AOF buffer size: 880 MB
15173:M 29 Jul 2019 05:49:01.680 * Background AOF buffer size: 880 MB
15183:M 29 Jul 2019 05:49:01.865 # Background AOF buffer size: 980 MB
15188:M 29 Jul 2019 05:49:01.942 # Background AOF buffer size: 980 MB
15178:M 29 Jul 2019 05:49:01.943 # Background AOF buffer size: 980 MB
15173:M 29 Jul 2019 05:49:01.992 # Background AOF buffer size: 980 MB
15178:M 29 Jul 2019 05:49:02.004 * Asynchronous AOF fsync is taking too long (disk is busy?). Writing the AOF buffer without waiting for fsync to complete, this may slow down Redis.
15173:M 29 Jul 2019 05:49:02.033 * Asynchronous AOF fsync is taking too long (disk is busy?). Writing the AOF buffer without waiting for fsync to complete, this may slow down Redis.
15183:M 29 Jul 2019 05:49:02.046 * Asynchronous AOF fsync is taking too long (disk is busy?). Writing the AOF buffer without waiting for fsync to complete, this may slow down Redis.
15188:M 29 Jul 2019 05:49:02.084 * Asynchronous AOF fsync is taking too long (disk is busy?). Writing the AOF buffer without waiting for fsync to complete, this may slow down Redis.
15183:M 29 Jul 2019 05:49:02.701 * Background AOF buffer size: 1080 MB
15188:M 29 Jul 2019 05:49:02.734 * Background AOF buffer size: 1080 MB
15173:M 29 Jul 2019 05:49:02.831 * Background AOF buffer size: 1080 MB
15178:M 29 Jul 2019 05:49:02.856 * Background AOF buffer size: 1080 MB
15183:M 29 Jul 2019 05:49:03.011 * Background AOF buffer size: 1180 MB
15188:M 29 Jul 2019 05:49:03.107 * Background AOF buffer size: 1180 MB
15173:M 29 Jul 2019 05:49:03.205 * Background AOF buffer size: 1180 MB
15178:M 29 Jul 2019 05:49:03.239 * Background AOF buffer size: 1180 MB
15173:M 29 Jul 2019 05:49:03.519 * Background AOF buffer size: 1280 MB
15188:M 29 Jul 2019 05:49:03.645 * Background AOF buffer size: 1280 MB
15183:M 29 Jul 2019 05:49:03.658 * Background AOF buffer size: 1280 MB
15178:M 29 Jul 2019 05:49:03.800 * Background AOF buffer size: 1280 MB
15173:M 29 Jul 2019 05:49:03.830 * Background AOF buffer size: 1380 MB
15173:M 29 Jul 2019 05:49:04.063 * Asynchronous AOF fsync is taking too long (disk is busy?). Writing the AOF buffer without waiting for fsync to complete, this may slow down Redis.
15188:M 29 Jul 2019 05:49:04.228 * Background AOF buffer size: 1380 MB
15183:M 29 Jul 2019 05:49:04.232 * Background AOF buffer size: 1380 MB
15178:M 29 Jul 2019 05:49:04.417 * Background AOF buffer size: 1380 MB
15188:M 29 Jul 2019 05:49:04.535 * Background AOF buffer size: 1480 MB
15183:M 29 Jul 2019 05:49:04.536 * Background AOF buffer size: 1480 MB
15173:M 29 Jul 2019 05:49:04.582 * Background AOF buffer size: 1480 MB
15178:M 29 Jul 2019 05:49:04.726 * Background AOF buffer size: 1480 MB
15188:M 29 Jul 2019 05:49:04.843 * Background AOF buffer size: 1580 MB
15183:M 29 Jul 2019 05:49:04.845 * Background AOF buffer size: 1580 MB
15173:M 29 Jul 2019 05:49:04.892 * Background AOF buffer size: 1580 MB
15188:M 29 Jul 2019 05:49:05.027 * Asynchronous AOF fsync is taking too long (disk is busy?). Writing the AOF buffer without waiting for fsync to complete, this may slow down Redis.
15178:M 29 Jul 2019 05:49:05.031 * Background AOF buffer size: 1580 MB
15178:M 29 Jul 2019 05:49:05.046 * Asynchronous AOF fsync is taking too long (disk is busy?). Writing the AOF buffer without waiting for fsync to complete, this may slow down Redis.
15183:M 29 Jul 2019 05:49:05.053 * Asynchronous AOF fsync is taking too long (disk is busy?). Writing the AOF buffer without waiting for fsync to complete, this may slow down Redis.
15173:M 29 Jul 2019 05:49:05.199 * Background AOF buffer size: 1680 MB
15173:M 29 Jul 2019 05:49:05.504 * Background AOF buffer size: 1780 MB
15183:M 29 Jul 2019 05:49:05.713 * Background AOF buffer size: 1680 MB
15188:M 29 Jul 2019 05:49:05.717 * Background AOF buffer size: 1680 MB
15173:M 29 Jul 2019 05:49:05.815 * Background AOF buffer size: 1880 MB
15178:M 29 Jul 2019 05:49:05.843 * Background AOF buffer size: 1680 MB
15173:M 29 Jul 2019 05:49:06.008 * Asynchronous AOF fsync is taking too long (disk is busy?). Writing the AOF buffer without waiting for fsync to complete, this may slow down Redis.
15183:M 29 Jul 2019 05:49:06.021 * Background AOF buffer size: 1780 MB
15188:M 29 Jul 2019 05:49:06.028 * Background AOF buffer size: 1780 MB
15178:M 29 Jul 2019 05:49:06.152 * Background AOF buffer size: 1780 MB
15183:M 29 Jul 2019 05:49:06.330 * Background AOF buffer size: 1880 MB
15188:M 29 Jul 2019 05:49:06.339 * Background AOF buffer size: 1880 MB
15178:M 29 Jul 2019 05:49:06.461 * Background AOF buffer size: 1880 MB
15173:M 29 Jul 2019 05:49:06.583 # Background AOF buffer size: 1980 MB
15183:M 29 Jul 2019 05:49:06.640 # Background AOF buffer size: 1980 MB
15188:M 29 Jul 2019 05:49:06.658 # Background AOF buffer size: 1980 MB
15178:M 29 Jul 2019 05:49:06.778 # Background AOF buffer size: 1980 MB
15173:M 29 Jul 2019 05:49:06.908 * Background AOF buffer size: 2080 MB
15183:M 29 Jul 2019 05:49:06.960 * Background AOF buffer size: 2080 MB
15188:M 29 Jul 2019 05:49:06.976 * Background AOF buffer size: 2080 MB
15188:M 29 Jul 2019 05:49:07.003 * Asynchronous AOF fsync is taking too long (disk is busy?). Writing the AOF buffer without waiting for fsync to complete, this may slow down Redis.
15183:M 29 Jul 2019 05:49:07.022 * Asynchronous AOF fsync is taking too long (disk is busy?). Writing the AOF buffer without waiting for fsync to complete, this may slow down Redis.
15178:M 29 Jul 2019 05:49:07.054 * Asynchronous AOF fsync is taking too long (disk is busy?). Writing the AOF buffer without waiting for fsync to complete, this may slow down Redis.
15173:M 29 Jul 2019 05:49:07.235 * Background AOF buffer size: 2180 MB
15173:M 29 Jul 2019 05:49:07.558 * Background AOF buffer size: 2280 MB
15183:M 29 Jul 2019 05:49:07.702 * Background AOF buffer size: 2180 MB
15188:M 29 Jul 2019 05:49:07.724 * Background AOF buffer size: 2180 MB
15178:M 29 Jul 2019 05:49:07.894 * Background AOF buffer size: 2080 MB
15173:M 29 Jul 2019 05:49:08.013 * Background AOF buffer size: 2380 MB
15183:M 29 Jul 2019 05:49:08.014 * Background AOF buffer size: 2280 MB
15188:M 29 Jul 2019 05:49:08.039 * Background AOF buffer size: 2280 MB
15173:M 29 Jul 2019 05:49:08.098 * Asynchronous AOF fsync is taking too long (disk is busy?). Writing the AOF buffer without waiting for fsync to complete, this may slow down Redis.
15178:M 29 Jul 2019 05:49:08.214 * Background AOF buffer size: 2180 MB
15183:M 29 Jul 2019 05:49:08.337 * Background AOF buffer size: 2380 MB
15188:M 29 Jul 2019 05:49:08.362 * Background AOF buffer size: 2380 MB
15178:M 29 Jul 2019 05:49:08.997 * Background AOF buffer size: 2280 MB
15183:M 29 Jul 2019 05:49:09.033 * Asynchronous AOF fsync is taking too long (disk is busy?). Writing the AOF buffer without waiting for fsync to complete, this may slow down Redis.
15188:M 29 Jul 2019 05:49:09.058 * Asynchronous AOF fsync is taking too long (disk is busy?). Writing the AOF buffer without waiting for fsync to complete, this may slow down Redis.
15178:M 29 Jul 2019 05:49:09.059 * Asynchronous AOF fsync is taking too long (disk is busy?). Writing the AOF buffer without waiting for fsync to complete, this may slow down Redis.
15173:M 29 Jul 2019 05:49:09.291 * Background AOF buffer size: 2480 MB
15173:M 29 Jul 2019 05:49:10.022 * Background AOF buffer size: 2580 MB
15173:M 29 Jul 2019 05:49:10.099 * Asynchronous AOF fsync is taking too long (disk is busy?). Writing the AOF buffer without waiting for fsync to complete, this may slow down Redis.
15178:M 29 Jul 2019 05:49:11.015 * Asynchronous AOF fsync is taking too long (disk is busy?). Writing the AOF buffer without waiting for fsync to complete, this may slow down Redis.
15173:M 29 Jul 2019 05:49:11.464 * Background AOF buffer size: 2680 MB
15178:M 29 Jul 2019 05:49:11.844 * Background AOF buffer size: 2380 MB
15178:M 29 Jul 2019 05:49:12.301 * Background AOF buffer size: 2480 MB
15178:M 29 Jul 2019 05:49:12.615 * Background AOF buffer size: 2580 MB
15173:M 29 Jul 2019 05:49:12.633 * Asynchronous AOF fsync is taking too long (disk is busy?). Writing the AOF buffer without waiting for fsync to complete, this may slow down Redis.
15178:M 29 Jul 2019 05:49:13.029 * Asynchronous AOF fsync is taking too long (disk is busy?). Writing the AOF buffer without waiting for fsync to complete, this may slow down Redis.
15173:M 29 Jul 2019 05:49:13.143 * Background AOF buffer size: 2780 MB
15183:M 29 Jul 2019 05:49:13.737 * Background AOF buffer size: 2480 MB
15173:M 29 Jul 2019 05:49:13.738 * Background AOF buffer size: 2880 MB
15178:M 29 Jul 2019 05:49:13.740 * Background AOF buffer size: 2680 MB
15188:M 29 Jul 2019 05:49:13.803 * Background AOF buffer size: 2480 MB
15203:C 29 Jul 2019 05:49:14.569 * SYNC append only file rewrite performed
15203:C 29 Jul 2019 05:49:14.650 * AOF rewrite: 310 MB of memory used by copy-on-write
15205:C 29 Jul 2019 05:49:14.699 * SYNC append only file rewrite performed
15205:C 29 Jul 2019 05:49:14.708 * AOF rewrite: 328 MB of memory used by copy-on-write
15204:C 29 Jul 2019 05:49:14.763 * SYNC append only file rewrite performed
15206:C 29 Jul 2019 05:49:14.769 * SYNC append only file rewrite performed
15204:C 29 Jul 2019 05:49:14.772 * AOF rewrite: 328 MB of memory used by copy-on-write
15206:C 29 Jul 2019 05:49:14.773 * AOF rewrite: 349 MB of memory used by copy-on-write
15183:M 29 Jul 2019 05:49:14.778 * Background AOF rewrite terminated with success
15178:M 29 Jul 2019 05:49:14.795 * Background AOF rewrite terminated with success
15188:M 29 Jul 2019 05:49:14.896 * Background AOF rewrite terminated with success
15173:M 29 Jul 2019 05:49:14.930 * Background AOF rewrite terminated with success
15183:M 29 Jul 2019 05:49:29.478 * Residual parent diff successfully flushed to the rewritten AOF (2532.72 MB)
15178:M 29 Jul 2019 05:49:31.876 * Residual parent diff successfully flushed to the rewritten AOF (2735.96 MB)
15188:M 29 Jul 2019 05:49:33.101 * Residual parent diff successfully flushed to the rewritten AOF (2543.85 MB)
15173:M 29 Jul 2019 05:49:34.848 * Residual parent diff successfully flushed to the rewritten AOF (2919.39 MB)
15183:M 29 Jul 2019 05:49:39.449 * Background AOF rewrite finished successfully
15178:M 29 Jul 2019 05:49:48.576 * Background AOF rewrite finished successfully
15188:M 29 Jul 2019 05:49:54.735 * Background AOF rewrite finished successfully
15173:M 29 Jul 2019 05:49:58.345 * Background AOF rewrite finished successfully
15183:M 29 Jul 2019 05:49:59.197 * 10000 changes in 60 seconds. Saving...
15188:M 29 Jul 2019 05:49:59.227 * 10000 changes in 60 seconds. Saving...
15183:M 29 Jul 2019 05:49:59.258 * Background saving started by pid 15213
15188:M 29 Jul 2019 05:49:59.281 * Background saving started by pid 15214
15173:M 29 Jul 2019 05:50:00.921 * 10000 changes in 60 seconds. Saving...
15173:M 29 Jul 2019 05:50:01.147 * Background saving started by pid 15215
15178:M 29 Jul 2019 05:50:01.669 * 10000 changes in 60 seconds. Saving...
15178:M 29 Jul 2019 05:50:01.744 * Background saving started by pid 15216
15215:C 29 Jul 2019 05:58:18.436 * DB saved on disk
15215:C 29 Jul 2019 05:58:18.478 * RDB: 1285 MB of memory used by copy-on-write
15173:M 29 Jul 2019 05:58:18.690 * Background saving terminated with success
15216:C 29 Jul 2019 05:58:36.375 * DB saved on disk
15216:C 29 Jul 2019 05:58:36.414 * RDB: 1322 MB of memory used by copy-on-write
15178:M 29 Jul 2019 05:58:36.637 * Background saving terminated with success
15213:C 29 Jul 2019 05:58:54.950 * DB saved on disk
15213:C 29 Jul 2019 05:58:54.994 * RDB: 878 MB of memory used by copy-on-write
15183:M 29 Jul 2019 05:58:55.207 * Background saving terminated with success
+ sleep 5
15214:C 29 Jul 2019 05:59:05.026 * DB saved on disk
15214:C 29 Jul 2019 05:59:05.062 * RDB: 864 MB of memory used by copy-on-write
15188:M 29 Jul 2019 05:59:05.191 * Background saving terminated with success
+ ps aux
+ grep redis-server
+ awk '{print $2; system("sudo kill -9 " $2); kill $(pgrep -f redis-server)}'
15173
15178
15183
15188
15267
15268
/users/skannan/ssd/NVM/appbench/redis-5.0.5/src/run.sh: line 73: 15266 Done                    ps aux
     15267                       | grep redis-server
     15268 Killed                  | awk '{print $2; system("sudo kill -9 " $2); kill $(pgrep -f redis-server)}'
+ CLEAN
+ (( b=1 ))
+ (( b<=4 ))
+ rm -rf dump.rdb
+ rm -rf appendonly-6378.aof appendonly-6379.aof appendonly-6380.aof appendonly-6381.aof
+ sudo killall redis-server1
+ sudo killall redis-server1
+ echo 'KILLING redis-server1'
KILLING redis-server1
+ (( b++  ))
+ (( b<=4 ))
+ rm -rf '*.rdb'
+ rm -rf '*.aof'
+ sudo killall redis-server2
+ sudo killall redis-server2
+ echo 'KILLING redis-server2'
KILLING redis-server2
+ (( b++  ))
+ (( b<=4 ))
+ rm -rf '*.rdb'
+ rm -rf '*.aof'
+ sudo killall redis-server3
+ sudo killall redis-server3
+ echo 'KILLING redis-server3'
KILLING redis-server3
+ (( b++  ))
+ (( b<=4 ))
+ rm -rf '*.rdb'
+ rm -rf '*.aof'
+ sudo killall redis-server4
+ sudo killall redis-server4
+ echo 'KILLING redis-server4'
KILLING redis-server4
+ (( b++  ))
+ (( b<=4 ))
+ sudo killall redis-benchmark
redis-benchmark: no process found
+ sudo killall redis-benchmark
redis-benchmark: no process found
+ CLEAN
+ (( b=1 ))
+ (( b<=4 ))
+ rm -rf '*.rdb'
+ rm -rf '*.aof'
+ sudo killall redis-server1
+ sudo killall redis-server1
+ echo 'KILLING redis-server1'
KILLING redis-server1
+ (( b++  ))
+ (( b<=4 ))
+ rm -rf '*.rdb'
+ rm -rf '*.aof'
+ sudo killall redis-server2
+ sudo killall redis-server2
+ echo 'KILLING redis-server2'
KILLING redis-server2
+ (( b++  ))
+ (( b<=4 ))
+ rm -rf '*.rdb'
+ rm -rf '*.aof'
+ sudo killall redis-server3
+ sudo killall redis-server3
+ echo 'KILLING redis-server3'
KILLING redis-server3
+ (( b++  ))
+ (( b<=4 ))
+ rm -rf '*.rdb'
+ rm -rf '*.aof'
+ sudo killall redis-server4
+ sudo killall redis-server4
+ echo 'KILLING redis-server4'
KILLING redis-server4
+ (( b++  ))
+ (( b<=4 ))
+ sudo killall redis-benchmark
redis-benchmark: no process found
+ sudo killall redis-benchmark
redis-benchmark: no process found
+ set +x
[28405.010951] Curr 14645 Currname redis-server4 HeteroProcname redis-server4 cache-hits 621724 cache-miss 676689 buff-hits 29844 buff-miss 838555 migrated 609487 migrate_time 0 avg_buff_life(us) 28062222 pgbuff-del 7099 avg_cache_life(us) 0 pgcache-del 0 active-cache 621724
[28405.010951]  
[28407.441028] drop_caches: sh (14874): drop_caches: 3
[28409.888334] drop_caches: sh (14883): drop_caches: 3
[28429.391448] EXT4-fs (loop0): mounted filesystem with ordered data mode. Opts: (null)
[28436.782766] nvmemul: ioctl command: 0xc008aa02
[28436.782772] nvmemul: getpci bus_id 0xff device_id 0x14, function_id 0x0, offset 0x190, val 0x804b
[28436.782783] nvmemul: ioctl command: 0x8008aa01
[28436.782785] nvmemul: setpci bus_id=0xff device_id=0x14, function_id=0x0, val=0x8fff
[28436.782791] nvmemul: ioctl command: 0x8008aa01
[28436.782792] nvmemul: setpci bus_id=0xff device_id=0x14, function_id=0x1, val=0x8fff
[28436.782797] nvmemul: ioctl command: 0x8008aa01
[28436.782799] nvmemul: setpci bus_id=0xff device_id=0x17, function_id=0x0, val=0x8fff
[28436.782804] nvmemul: ioctl command: 0x8008aa01
[28436.782806] nvmemul: setpci bus_id=0xff device_id=0x17, function_id=0x1, val=0x8fff
[28436.782811] nvmemul: ioctl command: 0x8008aa01
[28436.782813] nvmemul: setpci bus_id=0xff device_id=0x14, function_id=0x0, val=0x8fff
[28436.782818] nvmemul: ioctl command: 0x8008aa01
[28436.782819] nvmemul: setpci bus_id=0xff device_id=0x14, function_id=0x1, val=0x8fff
[28436.782824] nvmemul: ioctl command: 0x8008aa01
[28436.782826] nvmemul: setpci bus_id=0xff device_id=0x17, function_id=0x0, val=0x8fff
[28436.782831] nvmemul: ioctl command: 0x8008aa01
[28436.782832] nvmemul: setpci bus_id=0xff device_id=0x17, function_id=0x1, val=0x8fff
[28442.649920] drop_caches: sh (15094): drop_caches: 3
[28444.691962] drop_caches: sh (15102): drop_caches: 3
[28451.945855] drop_caches: sh (15164): drop_caches: 3
[28454.198782] drop_caches: sh (15172): drop_caches: 3
